@page "/editproduct/{proId:int}"

@inject IViewProductByIdUseCase ViewProductByIdUseCase
@inject IEditProductUseCase EditProductUseCase
@inject NavigationManager NavMgr

<h3>Edit Product</h3>

@if (this.product != null)
{
        <EditForm Model="product" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>

        <div class="form-group">
            <label for="name">Product Name</label>
            <InputText id="name" @bind-Value="product.ProductName" class="form-control"></InputText>
        </div>

        <div class="form-group">
            <label for="qty">Quantity</label>
            <InputNumber id="qty" @bind-Value="product.Quantity" class="form-control"></InputNumber>
        </div>

          <div class="form-group">
            <label for="price">Price</label>
            <InputNumber id="price" @bind-Value="product.Price" class="form-control"></InputNumber>
        </div>
        <br/>

        <ProductInventoriesComponent 
            productInventories = "product.ProductInventories"
            OnInventorySelected="OnInventorySelected"></ProductInventoriesComponent>

        <button type="submit" class="btn btn-primary">Save</button>
    </EditForm>
}

@code {
    [Parameter]
    public int proId { get; set; }

    private Product? product;

    protected override async Task OnParametersSetAsync()
    {
        product = await ViewProductByIdUseCase.ExecuteAsync(proId);
    }

    //protected override async Task OnInitializedAsync()
    //{
    //    await base.OnInitializedAsync();

    //    product = await ViewInventoryByIdUseCase.ExecuteAsync(InvId);
    //}


    public async Task OnValidSubmit()
    {
        if (this.product != null)
        {
            await EditProductUseCase.ExecuteAsync(this.product);
            NavMgr.NavigateTo("/products");
        }
    }

    
    private void OnInventorySelected(List<ProductInventory> productInventories)
    {
        this.product.ProductInventories = productInventories;
    }
}
