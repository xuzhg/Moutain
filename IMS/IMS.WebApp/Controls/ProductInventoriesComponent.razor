
<div class="form-group">
    <label>Inventroies</label>
    <ViewInventoriesComponent DisplaySearchResult="true"
        OnSelectInventory="OnSelectInventory"
    ></ViewInventoriesComponent>
</div>
<br />
@if (productInventories != null && productInventories.Count > 0)
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Quantity</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach(var proInv in productInventories)
            {
            <tr>
                <td>
                    @proInv.Inventory.InventoryName
                </td>
                <td>
                    <input type="number" min="0" @bind-value="proInv.InventoryQuantity"
                     @bind-value:event="oninput"
                     @onchange="OnInventoryQtyChanged"/>
                </td>
                <td>
                    <button class="btn btn-link" @onclick="@(() => RemoveInventory(proInv))">Remove</button>
                </td>
            </tr>
            }
        </tbody>

    </table>
}
@code {

    [Parameter]
    public EventCallback<List<ProductInventory>> OnInventorySelected { get; set; }

    public List<ProductInventory> productInventories = new List<ProductInventory>();


    private async Task OnInventoryQtyChanged()
    {
        await OnInventorySelected.InvokeAsync(this.productInventories);
    }

    private async Task OnSelectInventory(Inventory inv)
    {
        if (!productInventories.Any(x => x.Inventory.InventoryName.Equals(inv.InventoryName, StringComparison.OrdinalIgnoreCase)))
        {
            this.productInventories.Add(
                new ProductInventory
                {
                    InventoryId = inv.InventoryId,
                    Inventory = inv
                }
            );
        }

        await OnInventorySelected.InvokeAsync(this.productInventories);
    }

    private void RemoveInventory(ProductInventory proInv)
    {
        this.productInventories.Remove(proInv);
    }
}
