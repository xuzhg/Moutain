@inject IViewCategoriesUseCase ViewCategoriesUseCase
@inject IViewProductsByCategoryId ViewProductsByCategoryId

<div class="form-group">
    <label for="category">Category</label>
    <select id="category" class="form-control" @bind="SelectedCategoryId">
        <option selected></option>
        @foreach (var cat in categories)
        {
            <option value="@cat.CategoryId">@cat.Name</option>
        }
    </select>
</div>

@if (productsInCategory != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>Prod Name</th>
                <th>Qty</th>
            </tr>
        </thead>
        <tbody>
            @foreach(var prod in productsInCategory)
            {
                <tr @onclick="@(() => OnSelectProduct(prod))"
                    style="@(prod.ProductId == selectedProductId ? "background-color:beige;cursor:pointer":"cursor:pointer")">
                    <td>@prod.Name</td>
                    <td>@prod.Quantity</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private int selectedCategoryId;
    private int selectedProductId;
    private IEnumerable<Product> productsInCategory;

    [Parameter]
    public EventCallback<Product> OnProductSelected { get; set; }

    public int SelectedCategoryId
    {
        get
        {
            return this.selectedCategoryId;
        }
        set
        {
            this.selectedCategoryId = value;
            productsInCategory = ViewProductsByCategoryId.Execute(value);
            OnSelectProduct(null);
            StateHasChanged();
        }
    }

    private IEnumerable<Category> categories;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        categories = ViewCategoriesUseCase.Execute();
    }

    private void OnSelectProduct(Product product)
    {
        OnProductSelected.InvokeAsync(product);
        if (product != null)
        {
            selectedProductId = product.ProductId;
        }
    }
}
