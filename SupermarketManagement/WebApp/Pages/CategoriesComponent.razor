@page "/categories"

@attribute [Authorize(Policy = "AdminOnly")]

@inject IViewCategoriesUseCase ViewCategoriesUseCase
@inject IDeleteCategoryUseCase DelteCategoryUseCase
@inject NavigationManager NavigationManager
<h3>Manage Categories</h3>


@if (categories != null)
{
	<table class="table">
		<thead>
			<tr>
				<th>Name</th>
				<th>Description</th>
				<th></th>
			</tr>
		</thead>
		<tbody>
			@foreach (var category in categories)
			{
				<tr>
					<td>@category.Name</td>
					<td>@category.Description</td>
					<td>
						<button type="button" @onclick="@(() => OnClickEditCategory(category.CategoryId))" class="btn btn-link">Edit</button>
						<button type="button" @onclick="@(() => OnClickDeleteCategory(category.CategoryId))" class="btn btn-link">Delete</button>
					</td>
				</tr>
			}
		</tbody>
	</table>
}
<br/>
<button type="button" @onclick="OnClickAddCategory" class="btn btn-primary">Add Category</button>


@code {

	private List<Category> categories;

	protected override void OnInitialized()
	{
		base.OnInitialized();
		LoadCategories();
	}

	private void OnClickAddCategory()
	{
		NavigationManager.NavigateTo("/addcategory");
	}

	private void OnClickEditCategory(int categoryId)
	{
		NavigationManager.NavigateTo($"/editcategory/{categoryId}");
	}

	private void OnClickDeleteCategory(int categoryId)
	{
		DelteCategoryUseCase.Execute(categoryId);
		// NavigationManager.NavigateTo("/categories");
		LoadCategories();
	}

	private void LoadCategories()
	{
		categories = ViewCategoriesUseCase.Execute()?.ToList();
	}
}
	
